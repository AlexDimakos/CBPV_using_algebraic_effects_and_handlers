---------------------------------------------------
------- thunkCBNeed m >>= forceCBNeed === m -------
---------------------------------------------------

thunkCBNeed m >>= forceCBNeed 
=
 (do
  s <- get
  put (s ++ [Pack Nothing])
  return (CBNeed (length s, m))) >>= forceCBNeed
=
 (do
  put (s0 ++ [Pack Nothing])
  return (CBNeed (length s0, m))) >>=forceCBNeed
=
  Pure (CBNeed (length s0, m)) >>= forceCBNeed
=
  forceCBNeed (CBNeed (length s0, m))
=
  do
    s <- get
    case s !! (length s0) of
      Pack (Just v) -> return (unsafeCoerce v)
      Pack Nothing  -> do
        v <- m
        put (updateList n (Pack (Just v)) s)
        return v
=
  case (s0 ++ [Pack Nothing]) !! (length s0) of
    Pack (Just v) -> return (unsafeCoerce v)
    Pack Nothing  -> do
      v <- m
      put (updateList n (Pack (Just v)) s)
      return v
=
  do
    v <- m
    put (updateList n (Pack (Just v)) s)
    return v


--------------------------------------------
---- let x v m === (App v (Lambda x m)) ----
--------------------------------------------

denoteCBNeed env (Let x v m)
=
do
  v' <- thunkCBNeed (denoteCBNeed env v)
  denoteCBNeed (extendEnv x v' env) m
=
denoteCBNeed (extendEnv x (thunkCBNeed (denoteCBNeed env v)) env) m



denoteCBNeed env (App v (Lambda x m))
=
do
  v1 <- thunkCBNeed (denoteCBNeed env v)
  v2 <- denoteCBNeed env (Lambda x m)
  case v2 of
    (VFun (Pure f)) -> apply f v1
    _ -> undefined
=
do
  v2 <- denoteCBNeed env (Lambda x m)
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
do 
  v2 <- Pure $ VFun (lam (\v -> denoteCBNeed (extendEnv x v env) m))
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
do 
  v2 <- Pure $ VFun (Pure (Fun(\v -> denoteCBNeed (extendEnv x v env) m)))
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
case (VFun (Pure (Fun(\v -> denoteCBNeed (extendEnv x v env) m)))) of
  (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
  _ -> undefined
=
apply (Fun (\v -> denoteCBNeed (extendEnv x v env) m)) (thunkCBNeed (denoteCBNeed env v))
=
denoteCBNeed (extendEnv x (thunkCBNeed (denoteCBNeed env v)) env) m

-------------------------------
---- m === let x m (Var x) ----
-------------------------------

denoteCBNeed env (Let x m (Var x))
=
do
  v <- thunkCBNeed (denoteCBNeed env m)
  denoteCBNeed (extendEnv x v env) (Var x)
=
do
  v <- = (do
    s_0 <- get
    put (s_0 ++ [Pack Nothing])
    return (CBNeed (length s_0, (denoteCBNeed env m))))
  denoteCBNeed (extendEnv x v env) (Var x)
=
denoteCBNeed (extendEnv x (CBNeed (length s_0, (denoteCBNeed env m))) env) (Var x)
=
denoteCBNeed (x, (CBNeed (length s_0, (denoteCBNeed env m))) : env) (Var x)
=
case lookupEnv x (x, (CBNeed (length s_0, (denoteCBNeed env m))) : env)
  Just v -> forceCBNeed v
  Nothing -> undefined
=
forceCBNeed (CBNeed (length s_0, (denoteCBNeed env m)))
=
do
  s <- get
  case s !! (length s_0) of
    Pack (Just v) -> return (unsafeCoerce v)
    Pack Nothing  -> do
      v <- (denoteCBNeed env m)
      put (updateList (length s_0) (Pack (Just v)) s)
      return v
=
case (s_0 ++ [Pack Nothing]) !! (length s_0) of
  Pack (Just v) -> return (unsafeCoerce v)
  Pack Nothing  -> do
    v <- (denoteCBNeed env m)
    put (updateList (length s_0) (Pack (Just v)) s_0)
    return v
=
do
  v <- (denoteCBNeed env m)
  put (updateList (length s_0) (Pack (Just v)) s_0)
  return v


-----------------------------------------------------------------------------------
---- Pm (Inl v) (Inl (Lambda x m1)) (Inr (Lambda x m2)) == App v (Lambda x m1) ----
-----------------------------------------------------------------------------------

denoteCBNeed env (Pm (Inl v) (Inl (Lambda x m1)) (Inr (Lambda y m2)))
=
do
  v' <- denoteCBNeed env (Inl v)
  case v' of
    VInl val -> denoteCBNeed (extendEnv x val env) m1
    VInr val -> denoteCBNeed (extendEnv y val env) m2
    _ -> undefined
=
do
  v' <-  (do
    v <- thunkCBNeed (denoteCBNeed env e)
    return (VInl v))
  case v' of
    VInl val -> denoteCBNeed (extendEnv x val env) m1
    VInr val -> denoteCBNeed (extendEnv y val env) m2
    _ -> undefined
=
do
  v' <- return (VInl (thunkCBNeed (denoteCBNeed env e)))
  case v' of
    VInl val -> denoteCBNeed (extendEnv x val env) m1
    VInr val -> denoteCBNeed (extendEnv y val env) m2
    _ -> undefined
=
do
case (VInl (thunkCBNeed (denoteCBNeed env e))) of
  VInl val -> denoteCBNeed (extendEnv x val env) m1
  VInr val -> denoteCBNeed (extendEnv y val env) m2
  _ -> undefined
=
denoteCBNeed (extendEnv x (thunkCBNeed (denoteCBNeed env e)) env) m1


denoteCBNeed env (App v (Lambda x m1))
=
do
  v1 <- thunkCBNeed (denoteCBNeed env v)
  v2 <- denoteCBNeed env (Lambda x m1)
  case v2 of
    (VFun (Pure f)) -> apply f v1
    _ -> undefined
=
do
  v2 <- denoteCBNeed env (Lambda x m1)
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
do 
  v2 <- Pure $ VFun (lam (\v -> denoteCBNeed (extendEnv x v env) m1))
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
do 
  v2 <- Pure $ VFun (Pure (Fun(\v -> denoteCBNeed (extendEnv x v env) m1)))
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
case (VFun (Pure (Fun(\v -> denoteCBNeed (extendEnv x v env) m1)))) of
  (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
  _ -> undefined
=
apply (Fun (\v -> denoteCBNeed (extendEnv x v env) m2)) (thunkCBNeed (denoteCBNeed env v))
=
denoteCBNeed (extendEnv x (thunkCBNeed (denoteCBNeed env v)) env) m1

-----------------------------------------------------------------------------------
---- Pm (Inr v) (Inl (Lambda x m1)) (Inr (Lambda x m2)) == App v (Lambda y m2) ----
-----------------------------------------------------------------------------------

denoteCBNeed env (Pm (Inr v) (Inl (Lambda x m1)) (Inr (Lambda y m2)))
=
do
  v' <- denoteCBNeed env (Inr v)
  case v' of
    VInl val -> denoteCBNeed (extendEnv x val env) m1
    VInr val -> denoteCBNeed (extendEnv y val env) m2
    _ -> undefined
=
do
  v' <-  (do
    v <- thunkCBNeed (denoteCBNeed env e)
    return (VInr v))
  case v' of
    VInl val -> denoteCBNeed (extendEnv x val env) m1
    VInr val -> denoteCBNeed (extendEnv y val env) m2
    _ -> undefined
=
do
  v' <- return (VInr (thunkCBNeed (denoteCBNeed env e)))
  case v' of
    VInl val -> denoteCBNeed (extendEnv x val env) m1
    VInr val -> denoteCBNeed (extendEnv y val env) m2
    _ -> undefined
=
do
case (VInr (thunkCBNeed (denoteCBNeed env e))) of
  VInl val -> denoteCBNeed (extendEnv x val env) m1
  VInr val -> denoteCBNeed (extendEnv y val env) m2
  _ -> undefined
=
denoteCBNeed (extendEnv y (thunkCBNeed (denoteCBNeed env e)) env) m2


denoteCBNeed env (App v (Lambda y m2))
=
do
  v1 <- thunkCBNeed (denoteCBNeed env v)
  v2 <- denoteCBNeed env (Lambda y m2)
  case v2 of
    (VFun (Pure f)) -> apply f v1
    _ -> undefined
=
do
  v2 <- denoteCBNeed env (Lambda y m2)
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
do 
  v2 <- Pure $ VFun (lam (\v -> denoteCBNeed (extendEnv y v env) m2))
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
do 
  v2 <- Pure $ VFun (Pure (Fun(\v -> denoteCBNeed (extendEnv y v env) m2)))
  case v2 of
    (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
    _ -> undefined
=
case (VFun (Pure (Fun(\v -> denoteCBNeed (extendEnv y v env) m2)))) of
  (VFun (Pure f)) -> apply f (thunkCBNeed (denoteCBNeed env v))
  _ -> undefined
=
apply (Fun (\v -> denoteCBNeed (extendEnv y v env) m2)) (thunkCBNeed (denoteCBNeed env v))
=
denoteCBNeed (extendEnv y (thunkCBNeed (denoteCBNeed env v)) env) m2

-----------------------------------------------------
---- Let y (Let x m n) p === Let x m (Let y n p) ----
-----------------------------------------------------


denoteCBNeed env (Let y (Let x m n) p)
=
do
  v <- thunkCBNeed (denoteCBNeed env (Let x m n))
  denoteCBNeed (extendEnv x v env) p
=
do 
  v <- thunkCBNeed (do
    v <- thunkCBNeed (denoteCBNeed env m)
    denoteCBNeed (extendEnv x v env) n)
  denoteCBNeed (extendEnv y v env) p
=
do 
  v <- thunkCBNeed (denoteCBNeed (extendEnv x (thunkCBNeed (denoteCBNeed env m)) env) n)
  denoteCBNeed (extendEnv y v env) p
=
denoteCBNeed (extendEnv y (thunkCBNeed (denoteCBNeed (extendEnv x (thunkCBNeed (denoteCBNeed env m)) env) n)) env) p


denoteCBNeed env (Let x m (Let y n p))
=
do
  v <- thunkCBNeed (denoteCBNeed env m)
  denoteCBNeed (extendEnv x v env) (Let y n p)
=
denote (extendEnv x (thunkCBNeed (denoteCBNeed env m)) env) (Let y n p)
=
do 
  v <- thunkCBNeed (denoteCBNeed env n)
  denoteCBNeed (extendEnv y v (extendEnv x (thunkCBNeed (denoteCBNeed env m)) env)) p
=
denoteCBNeed (extendEnv y (thunkCBNeed (denoteCBNeed env n)) (extendEnv x (thunkCBNeed (denoteCBNeed env m)) env)) p


-------------------------------------------------------
---- Lambda y (Let x m n) === Let x m (Lambda y n) ----
-------------------------------------------------------


denoteCBNeed env (Lambda y (Let x m n))
=
Pure $ VFun (lam (\v -> denoteCBNeed (extendEnv y v env) (Let x m n)))
=
Pure $ VFun (lam (\v -> do
  v <- thunkCBNeed (denoteCBNeed (extendEnv y v env) m)
  denoteCBNeed (extendEnv x v (extendEnv y v env)) n
))
=
Pure $ VFun (lam (\v -> denoteCBNeed (extendEnv x (thunkCBNeed (denoteCBNeed (extendEnv y v env) m)) (extendEnv y v env)) n))


denoteCBNeed env (Let x m (Lambda y n))
=
do 
  v <- thunkCBNeed (denoteCBNeed env m)
  denoteCBNeed (extendEnv x v env) (Lambda y n)
=
denoteCBNeed (extendEnv x (thunkCBNeed (denoteCBNeed env m)) env) (Lambda y n)
=
Pure $ VFun (lam (\v -> denoteCBNeed (extendEnv y v (extendEnv x (thunkCBNeed (denoteCBNeed env m)) env)) n))

